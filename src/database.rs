#[allow(unused)]
use std::future::Future;
use std::ops::{Deref, DerefMut};

use mongodb::{
    bson::{doc, oid::ObjectId},
    options::ClientOptions,
    Client, Collection,
};
use serde::{Deserialize, Serialize};
use tracing::debug;

#[tracing::instrument(skip_all, level = "debug")]
pub async fn setup_db(config: &crate::Config) -> anyhow::Result<MongoDriver> {
    debug!("Connecting to MongoDB...");
    let mut opts = ClientOptions::parse(&config.mongo_db_connection).await?;
    debug!("Connected!");

    opts.app_name = Some(String::from("2143.me main worker"));

    let client = Client::with_options(opts)?;
    let db = client.database(&config.mongo_db_table);

    Ok(MongoDriver(db))
}

/// This is a simple wrapper type which adds an implicit `_id` field as generated by a mongodb
/// insert
#[derive(Serialize, Deserialize, Debug, Clone, PartialEq, Eq, PartialOrd, Ord)]
pub struct _ID<T> {
    pub _id: ObjectId,

    #[serde(flatten)]
    value: T,
}

impl<T> Deref for _ID<T> {
    type Target = T;

    fn deref(&self) -> &Self::Target {
        &self.value
    }
}

impl<T> DerefMut for _ID<T> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.value
    }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Upload {}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct User {}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Counter {}

/// Cheaply Clonable. This wrapper types provides type-hinted collections.
#[derive(Clone, Debug)]
pub struct MongoDriver(mongodb::Database);

impl MongoDriver {
    pub fn db(&self) -> &mongodb::Database {
        &self.0
    }

    pub fn uploads_collection(&self) -> Collection<_ID<Upload>> {
        self.db().collection("uploads")
    }

    pub fn users_collection(&self) -> Collection<_ID<User>> {
        self.db().collection("users")
    }

    pub fn counters_collection(&self) -> Collection<_ID<Counter>> {
        self.db().collection("users")
    }
}
